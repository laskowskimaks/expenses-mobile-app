import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';
import { formatCurrency } from '@/services/transactionService';
import { formatDate } from '@/utils/dateUtils';
import { Chip, useTheme } from 'react-native-paper';

const TransactionItem = ({ transaction }) => {
  const theme = useTheme();
  const isExpense = transaction.amount < 0;
  const isAutoGenerated = transaction.notes && transaction.notes.includes('(transakcja dodana automatycznie)');

  return (
    <View style={[styles.container, { backgroundColor: theme.colors.surface }]}>
      <View style={styles.leftSection}>
        {/* Ikona kategorii */}
        <View style={[styles.iconContainer, { backgroundColor: transaction.categoryColor || theme.colors.onSurface }]}>
          <MaterialCommunityIcons
            name={transaction.categoryIcon || 'help-circle'}
            size={24}
            color="white"
          />
        </View>

        {/* Informacje o transakcji */}
        <View style={styles.infoContainer}>
          <View style={styles.titleRow}>
            <Text style={[styles.title, { color: theme.colors.onSurface }]}>{transaction.title}</Text>

            {isAutoGenerated && (
              <View style={styles.autoBadge}>
                <Text style={styles.autoText}>Auto</Text>
              </View>
            )}

          </View>

          <Text style={styles.category}>{transaction.categoryName || 'Bez kategorii'}</Text>
          <Text style={styles.date}>{formatDate(transaction.transactionDate)}</Text>

          {transaction.location && (
            <Text style={styles.location}>üìç {transaction.location}</Text>
          )}

          {transaction.notes && (
            <Text style={styles.notes}>{transaction.notes}</Text>
          )}

          {transaction.tags && transaction.tags.length > 0 && (
            <View style={styles.tagsContainer}>
              <View style={styles.tagsRow}>
                {transaction.tags.slice(0, 3).map(tag => (
                  <Chip
                    key={tag.id}
                    style={styles.tagChip}
                    textStyle={styles.tagText}
                    compact={true}
                    mode="outlined"
                  >
                    {tag.name}
                  </Chip>
                ))}
                {transaction.tags.length > 3 && (
                  <View style={styles.moreTagsChip}>
                    <Text style={styles.moreTagsText}>+{transaction.tags.length - 3}</Text>
                  </View>
                )}
              </View>
            </View>
          )}
        </View>
      </View>

      {/* Kwota */}
      <View style={styles.amountContainer}>
        <Text style={[
          styles.amount,
          {
            color: isExpense
              ? (theme.dark ? '#ff6b6b' : '#e74c3c')
              : (theme.dark ? '#51cf66' : '#27ae60')
          }
        ]}>
          {isExpense ? '' : '+'}{formatCurrency(transaction.amount)}
        </Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    padding: 15,
    marginVertical: 4,
    marginHorizontal: 10,
    borderRadius: 8,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.22,
    shadowRadius: 2.22,
    elevation: 3,
  },
  leftSection: {
    flex: 1,
    flexDirection: 'row',
  },
  iconContainer: {
    width: 45,
    height: 45,
    borderRadius: 22.5,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 12,
  },
  infoContainer: {
    flex: 1,
  },
  titleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
    flex: 1,
  },
  autoBadge: {
    backgroundColor: '#9B59B6',
    paddingHorizontal: 8,
    paddingVertical: 3,
    borderRadius: 12,
    marginLeft: 6,
    shadowColor: '#9B59B6',
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.3,
    shadowRadius: 2,
    elevation: 2,
  },
  autoText: {
    color: '#ffffff',
    fontSize: 10,
    fontWeight: 'bold',
    letterSpacing: 0.5,
  },
  category: {
    fontSize: 14,
    color: '#7f8c8d',
    marginBottom: 2,
  },
  date: {
    fontSize: 12,
    color: '#95a5a6',
    marginBottom: 4,
  },
  location: {
    fontSize: 12,
    color: '#95a5a6',
    marginBottom: 2,
  },
  notes: {
    fontSize: 12,
    color: '#95a5a6',
    fontStyle: 'italic',
    marginBottom: 2,
  },
  tagsContainer: {
    marginTop: 4,
    marginBottom: 4,
  },
  tagsRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'center',
    gap: 4,
  },
  tagChip: {
    backgroundColor: '#e8f4fd',
    borderColor: '#3498db',
    borderWidth: 1,
    borderRadius: 16,
    paddingHorizontal: 8,
    paddingVertical: 2,
    marginRight: 4,
    marginBottom: 4,
    minHeight: 24,
    justifyContent: 'center',
  },
  tagText: {
    fontSize: 11,
    color: '#2980b9',
    fontWeight: '600',
    lineHeight: 16,
  },
  moreTagsChip: {
    backgroundColor: '#ecf0f1',
    borderRadius: 12,
    paddingHorizontal: 8,
    paddingVertical: 4,
    marginRight: 4,
    marginBottom: 4,
    minHeight: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  moreTagsText: {
    fontSize: 10,
    color: '#7f8c8d',
    fontWeight: 'bold',
    lineHeight: 14,
  },
  amountContainer: {
    justifyContent: 'center',
    alignItems: 'flex-end',
    minWidth: 80,
  },
  amount: {
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default TransactionItem;